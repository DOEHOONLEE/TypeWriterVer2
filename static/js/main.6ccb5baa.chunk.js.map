{"version":3,"sources":["switch2.ogg","WordsPerMin.js","WordDisplay.js","UserInput.js","Timer.js","StartGame.js","History.js","App.js","index.js"],"names":["module","exports","WordsPerMin","count","WordDisplay","word","userInput","includes","style","color","UserInput","onChange","counter","randomWord","getWord","handleKeyPress","inputFocus","className","type","placeholder","value","onKeyPress","ref","autoCapitalize","Timer","secLeft","StartGame","props","state","seconds","stop","timer","bind","onStart","onReset","setData","this","setState","interval","setInterval","prevNum","userRecord","clearInterval","onClick","Component","Scores","date","wpm","index","History","nextID","scoreHistory","i","localStorage","length","temp","JSON","parse","push","record","sort","a","b","map","eachScore","key","App","useState","setUserInput","setCounter","faker","random","toLowerCase","split","setRandomWord","useRef","emptyUserInput","counterReset","e","target","Audio","Switch2","play","charCode","current","focus","empty","today","Date","scoreInfo","getFullYear","getMonth","getDate","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6ccb5baa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/switch2.563d3524.ogg\";","import React from 'react';\n\nfunction WordsPerMin({ count }) {\n\n    return (\n        <div>\n            <h3>\n                correct words: {count}\n            </h3>\n        </div>\n    );\n}\n\nexport default WordsPerMin;","import React from 'react';\n\nfunction WordDisplay({ word, userInput }) {\n    \n    return (\n        <div>\n                {!word.includes(userInput) ? <h1 style={{color: \"hotpink\"}}>{word}</h1> : <h1>{word}</h1>}\n        </div>\n    );\n};\n\nexport default WordDisplay;","import React from 'react';\nimport WordsPerMin from './WordsPerMin';\nimport WordDisplay from './WordDisplay';\n\nfunction UserInput({ onChange, userInput, counter, getWord, randomWord, handleKeyPress, inputFocus }) {\n\n    // const [userInput, setUserInput] = useState('');\n\n    // const [counter, setCounter] = useState(0);\n    \n    // const getWord = faker.random.word().toLowerCase().split(\" \")[0];\n\n    // const [randomWord, setRandomWord] = useState(getWord);\n\n    // const onChange = (e) => {\n    //     setUserInput(e.target.value);\n    // }\n\n    // const handleKeyPress = (e) => {\n    //     if (e.charCode === 13) {\n    //         if (userInput === randomWord) {\n    //             setCounter(counter + 1);\n    //             emptyUserInput();\n    //         }\n    //         else {\n    //             emptyUserInput();\n    //         }\n    //     }\n    // }\n    \n    // const emptyUserInput = () => {\n    //     setRandomWord(getWord);\n    //     setUserInput('');\n    // }\n\n    return(\n        <div>\n            <WordDisplay\n                word={randomWord}\n                userInput={userInput}\n            />\n            <input\n                className=\"userInput\"\n                type=\"text\"\n                placeholder=\"click START GAME to play\"\n                onChange={onChange}\n                value={userInput}\n                onKeyPress={handleKeyPress}\n                ref={inputFocus}\n                autoCapitalize=\"none\"\n            />\n            <WordsPerMin\n                count={counter}\n            />\n        </div>\n    );\n};\n\nexport default UserInput;","import React from 'react';\n\nfunction Timer({secLeft}) {\n\n    return (\n        <div>\n            <h1>\n                    Time Remaining : {secLeft}\n            </h1>\n        </div>\n    );\n}\n\nexport default Timer;","import React, { Component } from 'react';\nimport Timer from './Timer';\n\nclass StartGame extends Component {\n    \n    constructor(props) {\n        super(props);\n        this.state = {\n            seconds: 60,\n            stop: true\n        };\n        this.timer = this.timer.bind(this);\n        this.onStart = this.props.onStart;\n        this.onReset = this.props.onReset;\n        this.setData = this.props.setData;\n    }\n\n    timer() {\n        this.onStart();\n\n        this.setState({\n            ...this.state,\n            stop: false\n        })\n        this.interval = setInterval(\n            () => {\n                if (this.state.seconds > 0 && !this.state.stop) {\n                    this.setState(prevNum => ({\n                        seconds: prevNum.seconds - 1\n                    }));\n                }\n                else {\n                    const userRecord = this.props.counter;\n\n                    this.setData(userRecord);\n\n                    this.setState({\n                        seconds: 60,\n                        stop: true\n                    });\n\n                    this.onReset();\n                    clearInterval(this.interval);\n                }\n            },\n            1000\n        );\n    };\n\n    render() {\n        return (\n            <div>\n                <button\n                    onClick={this.timer}\n                    className=\"startButton\"\n                >\n                    Start Game\n                </button>\n                <Timer secLeft={this.state.seconds} />\n            </div>\n        );\n    }\n}\n\nexport default StartGame;","import React from 'react';\n\nfunction Scores({ date, wpm, index }) {\n    return (\n        <h3 className=\"historyList highlight\">\n            {index+1}. &nbsp; {date} [{wpm} WPM]\n        </h3>\n    )\n}\n\nfunction History({ counter, nextID }) {\n    const getData = () => {\n\n    }\n\n    const scoreHistory = [];\n\n    for (let i=1; i <= localStorage.length; i++) {\n        const scores = {...localStorage};\n        const temp = JSON.parse('\"scores[i]\"');\n        scoreHistory.push([temp.date, temp.record])\n    }\n    \n    scoreHistory.sort((a,b) => b[1] - a[1]);\n\n    return (\n        <div>\n            <h2 className=\"historyList\">\n                Ranking History\n            </h2>\n            {\n                scoreHistory.map(\n                    (eachScore, index) => (\n                        <Scores\n                            date={eachScore[0]}\n                            wpm={eachScore[1]}\n                            key={index}\n                            index={index}\n                        />\n                    )\n                )\n            }\n        </div>\n    )\n}\n\nexport default History;","import React, { useState, useRef } from 'react';\nimport UserInput from './UserInput';\nimport StartGame from './StartGame';\nimport History from './History';\nimport faker, { random } from 'faker';\nimport Switch2 from './switch2.ogg';\nimport './App.css';\n\nfunction App() {\n\n  const [userInput, setUserInput] = useState('');\n\n  const [counter, setCounter] = useState(0);\n  \n  const getWord = faker.random.word().toLowerCase().split(\" \")[0];\n\n  const [randomWord, setRandomWord] = useState(getWord);\n\n  const inputFocus = useRef();\n\n  const nextID = useRef(1);\n\n  const onChange = (e) => {\n      setUserInput(e.target.value);\n      const typingSound = new Audio (Switch2);\n      typingSound.play();\n  }\n  \n  const handleKeyPress = (e) => {\n      if (e.charCode === 13) {\n          if (userInput === randomWord) {\n              setCounter(counter + 1);\n              emptyUserInput();\n          }\n          else {\n              emptyUserInput();\n          }\n      }\n  };\n\n  const setData = (wpm) => {\n    const today = new Date();\n    const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n    const currentDate = (\n        today.getFullYear()\n        + '-'\n        + monthNames[today.getMonth()-1]\n        + '-'\n        + today.getDate()\n    );\n\n    let scoreInfo = {\n      date: currentDate,\n      record: wpm\n    }\n\n    localStorage.setItem(nextID.current, JSON.stringify(scoreInfo));\n    \n    nextID.current++;\n  };\n  \n  const emptyUserInput = () => {\n      setRandomWord(getWord);\n      setUserInput('');\n  };\n\n  const counterReset = () => {\n    setCounter(0);\n  };\n\n  const onStart = () => {\n    inputFocus.current.focus();\n    emptyUserInput();\n    counterReset();\n  };\n  \n  const onReset = () => {\n    emptyUserInput();\n    counterReset();\n  };\n\n  return (\n    <div className=\"gameBoard\">\n      <UserInput\n        onChange={onChange}\n        userInput={userInput}\n        counter={counter}\n        getWord={getWord}\n        randomWord={randomWord}\n        handleKeyPress={handleKeyPress}\n        inputFocus={inputFocus}\n      />\n      <StartGame\n        onStart={onStart}\n        onReset={onReset}\n        empty={emptyUserInput}\n        setData={setData}\n        counter={counter}\n      />\n      <History\n        counter={counter}\n        nextID={nextID}\n      />\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}