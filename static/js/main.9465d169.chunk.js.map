{"version":3,"sources":["switch2.ogg","WordsPerMin.js","UserInput.js","WordDisplay.js","Timer.js","StartGame.js","App.js","index.js"],"names":["module","exports","WordsPerMin","count","UserInput","onChange","userInput","counter","randomWord","getWord","handleKeyPress","inputFocus","word","type","value","onKeyPress","ref","autoCapitalize","WordDisplay","includes","style","color","Timer","secLeft","StartGame","props","state","seconds","stop","timer","bind","onStart","this","clearInterval","interval","setState","setInterval","prevNum","onClick","Component","App","useState","setUserInput","setCounter","faker","random","toLowerCase","split","setRandomWord","setSecLeft","useRef","emptyUserInput","className","e","target","Audio","Switch2","play","charCode","current","focus","empty","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,qC,2GCa5BC,MAXf,YAAiC,IAAVC,EAAS,EAATA,MAEnB,OACI,6BACI,8CACoBA,K,gBCkDjBC,MApDf,YAAuG,IAAlFC,EAAiF,EAAjFA,SAAUC,EAAuE,EAAvEA,UAAWC,EAA4D,EAA5DA,QAAkBC,GAA0C,EAAnDC,QAAmD,EAA1CD,YAAYE,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WA+BpF,OACI,6BACI,kBAAC,EAAD,CACIC,KAAMJ,EACNF,UAAWA,IAEf,2BACIO,KAAK,OACLR,SAAUA,EACVS,MAAOR,EACPS,WAAYL,EACZM,IAAKL,EACLM,eAAe,SAEnB,kBAAC,EAAD,CACId,MAAOI,MCvCRW,MATf,YAA2C,IAApBN,EAAmB,EAAnBA,KAAMN,EAAa,EAAbA,UAEzB,OACI,6BACUM,EAAKO,SAASb,GAA0D,4BAAKM,GAAlD,wBAAIQ,MAAO,CAACC,MAAO,YAAaT,KCM9DU,MAXf,YAA2B,IAAXC,EAAU,EAAVA,QAEZ,OACI,6BACI,gDAC0BA,K,4CCqDvBC,E,kDAvDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,QAAS,GACTC,MAAM,GAEV,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,gBACb,EAAKC,QAAU,EAAKN,MAAMM,QAPX,E,oDAiBV,IAAD,OACJC,KAAKD,UAELE,cAAcD,KAAKE,UAEnBF,KAAKG,SAAL,2BACOH,KAAKN,OADZ,IAEIE,MAAM,KAEVI,KAAKE,SAAWE,aACZ,WACQ,EAAKV,MAAMC,QAAU,IAAM,EAAKD,MAAME,KACtC,EAAKO,UAAS,SAAAE,GAAO,MAAK,CACtBV,QAASU,EAAQV,QAAU,OAI/B,EAAKQ,SAAS,CACVR,QAAS,GACTC,MAAM,IAEV,EAAKG,aAGb,O,+BAKJ,OACI,6BACI,4BAAQO,QAASN,KAAKH,OAAtB,gBACA,kBAAC,EAAD,CAAON,QAASS,KAAKN,MAAMC,e,GAnDnBY,a,yBCyETC,MAnEf,WAAgB,IAAD,EAEqBC,mBAAS,IAF9B,mBAENnC,EAFM,KAEKoC,EAFL,OAIiBD,mBAAS,GAJ1B,mBAINlC,EAJM,KAIGoC,EAJH,KAMPlC,EAAUmC,IAAMC,OAAOjC,OAAOkC,cAAcC,MAAM,KAAK,GANhD,EAQuBN,mBAAShC,GARhC,mBAQND,EARM,KAQMwC,EARN,OAUiBP,mBAAS,IAV1B,mBAUGQ,GAVH,WAYPtC,EAAauC,mBAoBbC,EAAiB,WACnBH,EAAcvC,GACdiC,EAAa,KAajB,OACE,yBAAKU,UAAU,aACb,kBAAC,EAAD,CACE/C,SApCW,SAACgD,GACdX,EAAaW,EAAEC,OAAOxC,OACF,IAAIyC,MAAOC,KACnBC,QAkCVnD,UAAWA,EACXC,QAASA,EACTE,QAASA,EACTD,WAAYA,EACZE,eAnCiB,SAAC2C,GACD,KAAfA,EAAEK,WACEpD,IAAcE,GACdmC,EAAWpC,EAAU,GACrB4C,KAGAA,MA6BNxC,WAAYA,IAEd,kBAAC,EAAD,CACEoB,QAlBU,WACdoB,IAJAR,EAAW,GAMXhC,EAAWgD,QAAQC,SAgBfX,WAAYA,EACZY,MAAOV,MClEfW,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.9465d169.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/switch2.563d3524.ogg\";","import React from 'react';\r\n\r\nfunction WordsPerMin({ count }) {\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                correct words: {count}\r\n            </h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WordsPerMin;","import React, { useState } from 'react';\r\nimport WordsPerMin from './WordsPerMin';\r\nimport WordDisplay from './WordDisplay';\r\nimport faker, { random } from 'faker';\r\n\r\nfunction UserInput({ onChange, userInput, counter, getWord, randomWord, handleKeyPress, inputFocus }) {\r\n\r\n    // const [userInput, setUserInput] = useState('');\r\n\r\n    // const [counter, setCounter] = useState(0);\r\n    \r\n    // const getWord = faker.random.word().toLowerCase().split(\" \")[0];\r\n\r\n    // const [randomWord, setRandomWord] = useState(getWord);\r\n\r\n    // const onChange = (e) => {\r\n    //     setUserInput(e.target.value);\r\n    // }\r\n\r\n    // const handleKeyPress = (e) => {\r\n    //     if (e.charCode === 13) {\r\n    //         if (userInput === randomWord) {\r\n    //             setCounter(counter + 1);\r\n    //             emptyUserInput();\r\n    //         }\r\n    //         else {\r\n    //             emptyUserInput();\r\n    //         }\r\n    //     }\r\n    // }\r\n    \r\n    // const emptyUserInput = () => {\r\n    //     setRandomWord(getWord);\r\n    //     setUserInput('');\r\n    // }\r\n\r\n    return(\r\n        <div>\r\n            <WordDisplay\r\n                word={randomWord}\r\n                userInput={userInput}\r\n            />\r\n            <input\r\n                type=\"text\"\r\n                onChange={onChange}\r\n                value={userInput}\r\n                onKeyPress={handleKeyPress}\r\n                ref={inputFocus}\r\n                autoCapitalize=\"none\"\r\n            />\r\n            <WordsPerMin\r\n                count={counter}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserInput;","import React from 'react';\r\nimport UserInput from './UserInput';\r\n\r\nfunction WordDisplay({ word, userInput }) {\r\n    \r\n    return (\r\n        <div>\r\n                {!word.includes(userInput) ? <h1 style={{color: \"hotpink\"}}>{word}</h1> : <h1>{word}</h1>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WordDisplay;","import React, { useState, useEffect } from 'react';\r\n\r\nfunction Timer({secLeft}) {\r\n\r\n    return (\r\n        <div>\r\n            <h1>\r\n                    Time Remaining : {secLeft}\r\n            </h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;","import React, { Component } from 'react';\r\nimport Timer from './Timer';\r\n\r\nclass StartGame extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            seconds: 60,\r\n            stop: true\r\n        };\r\n        this.timer = this.timer.bind(this);\r\n        this.onStart = this.props.onStart;\r\n    }\r\n\r\n    // tick() {\r\n    //     this.interval = setInterval(() => {\r\n    //         this.setState(prevState => ({\r\n    //             seconds: prevState.seconds - 1\r\n    //         }));\r\n    //     }, 1000);\r\n    // }\r\n    timer() {\r\n        this.onStart();\r\n        \r\n        clearInterval(this.interval);\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            stop: false\r\n        })\r\n        this.interval = setInterval(\r\n            () => {\r\n                if (this.state.seconds > 0 && !this.state.stop) {\r\n                    this.setState(prevNum => ({\r\n                        seconds: prevNum.seconds - 1\r\n                    }))\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        seconds: 60,\r\n                        stop: true\r\n                    });\r\n                    this.onStart();\r\n                }\r\n            },\r\n            1000\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={this.timer}> Start Game </button>\r\n                <Timer secLeft={this.state.seconds} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StartGame;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from 'react';\r\n\r\n// function StartGame({ onStart, setSecLeft, secLeft }) {\r\n\r\n//     React.useEffect(() => {\r\n//         if (secLeft > 0) {\r\n//           setTimeout(() => setSecLeft(secLeft - 1), 1000);\r\n//         }\r\n//     });\r\n\r\n//     return (\r\n//         <div>\r\n            \r\n//             <button\r\n//                 onClick={onStart}\r\n//             >\r\n//                 START GAME!\r\n//             </button>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default StartGame;","import React, { useState, useEffect, useRef } from 'react';\nimport WordDisplay from './WordDisplay';\nimport UserInput from './UserInput';\nimport Timer from './Timer';\nimport StartGame from './StartGame';\nimport faker, { random } from 'faker';\nimport Switch2 from './switch2.ogg';\nimport './App.css';\n\nfunction App() {\n\n  const [userInput, setUserInput] = useState('');\n\n  const [counter, setCounter] = useState(0);\n  \n  const getWord = faker.random.word().toLowerCase().split(\" \")[0];\n\n  const [randomWord, setRandomWord] = useState(getWord);\n\n  const [secLeft, setSecLeft] = useState(60);\n\n  const inputFocus = useRef();\n\n  const onChange = (e) => {\n      setUserInput(e.target.value);\n      const typingSound = new Audio (Switch2);\n      typingSound.play();\n  }\n  \n  const handleKeyPress = (e) => {\n      if (e.charCode === 13) {\n          if (userInput === randomWord) {\n              setCounter(counter + 1);\n              emptyUserInput();\n          }\n          else {\n              emptyUserInput();\n          }\n      }\n  };\n  \n  const emptyUserInput = () => {\n      setRandomWord(getWord);\n      setUserInput('');\n  };\n\n  const counterReset = () => {\n    setCounter(0);\n  };\n\n  const onStart = () => {\n    emptyUserInput();\n    counterReset();\n    inputFocus.current.focus();\n  };\n  \n  return (\n    <div className=\"gameBoard\">\n      <UserInput\n        onChange={onChange}\n        userInput={userInput}\n        counter={counter}\n        getWord={getWord}\n        randomWord={randomWord}\n        handleKeyPress={handleKeyPress}\n        inputFocus={inputFocus}\n      />\n      <StartGame\n        onStart={onStart}\n        setSecLeft={setSecLeft}\n        empty={emptyUserInput}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}