{"version":3,"sources":["switch2.ogg","WordsPerMin.js","WordDisplay.js","UserInput.js","Timer.js","StartGame.js","History.js","App.js","index.js"],"names":["module","exports","WordsPerMin","count","WordDisplay","word","userInput","includes","style","color","UserInput","onChange","counter","randomWord","getWord","handleKeyPress","inputFocus","type","value","onKeyPress","ref","autoCapitalize","Timer","secLeft","StartGame","props","state","seconds","stop","timer","bind","onStart","onReset","setData","this","setState","interval","setInterval","prevNum","console","log","userRecord","clearInterval","onClick","Component","Scores","date","wpm","className","History","scores","localStorage","scoreHistory","elem","push","map","eachScore","index","key","App","useState","setUserInput","setCounter","faker","random","toLowerCase","split","setRandomWord","useRef","emptyUserInput","counterReset","e","target","Audio","Switch2","play","charCode","current","focus","empty","today","Date","currentDate","getFullYear","getMonth","getDate","getHours","getMinutes","setItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,qC,2GCa5BC,MAXf,YAAiC,IAAVC,EAAS,EAATA,MAEnB,OACI,6BACI,8CACoBA,KCIjBC,MATf,YAA2C,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,UAEzB,OACI,6BACUD,EAAKE,SAASD,GAA0D,4BAAKD,GAAlD,wBAAIG,MAAO,CAACC,MAAO,YAAaJ,KCkD9DK,MApDf,YAAuG,IAAlFC,EAAiF,EAAjFA,SAAUL,EAAuE,EAAvEA,UAAWM,EAA4D,EAA5DA,QAAkBC,GAA0C,EAAnDC,QAAmD,EAA1CD,YAAYE,EAA8B,EAA9BA,eAAgBC,EAAc,EAAdA,WA+BpF,OACI,6BACI,kBAAC,EAAD,CACIX,KAAMQ,EACNP,UAAWA,IAEf,2BACIW,KAAK,OACLN,SAAUA,EACVO,MAAOZ,EACPa,WAAYJ,EACZK,IAAKJ,EACLK,eAAe,SAEnB,kBAAC,EAAD,CACIlB,MAAOS,M,4CCrCRU,MAXf,YAA2B,IAAXC,EAAU,EAAVA,QAEZ,OACI,6BACI,gDAC0BA,KCsDvBC,E,kDAxDX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,QAAS,EACTC,MAAM,GAEV,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,gBACb,EAAKC,QAAU,EAAKN,MAAMM,QAC1B,EAAKC,QAAU,EAAKP,MAAMO,QAC1B,EAAKC,QAAU,EAAKR,MAAMQ,QATX,E,oDAYV,IAAD,OACJC,KAAKH,UAELG,KAAKC,SAAL,2BACOD,KAAKR,OADZ,IAEIE,MAAM,KAEVM,KAAKE,SAAWC,aACZ,WACI,GAAI,EAAKX,MAAMC,QAAU,IAAM,EAAKD,MAAME,KACtC,EAAKO,UAAS,SAAAG,GAAO,MAAK,CACtBX,QAASW,EAAQX,QAAU,MAE/BY,QAAQC,IAAI,EAAKf,MAAMb,aAEtB,CACD,IAAM6B,EAAa,EAAKhB,MAAMb,QAE9B2B,QAAQC,IAAIC,GACZ,EAAKR,QAAQQ,GAEb,EAAKN,SAAS,CACVR,QAAS,EACTC,MAAM,IAGV,EAAKI,UACLU,cAAc,EAAKN,aAG3B,O,+BAKJ,OACI,6BACI,4BAAQO,QAAST,KAAKL,OAAtB,gBACA,kBAAC,EAAD,CAAON,QAASW,KAAKR,MAAMC,e,GApDnBiB,aCDxB,SAASC,EAAT,GAAgC,IAAdC,EAAa,EAAbA,KAAMC,EAAO,EAAPA,IACpB,OACI,wBAAIC,UAAU,eACTF,EADL,KACaC,EADb,SAsCOE,MAhCf,YAA8B,EAAXrC,QAAY,IAKrBsC,EAAM,eAAOC,cACbC,EAAe,GAErB,IAAK,IAAIC,KAAQH,EACbE,EAAaE,KAAK,CAACD,EAAMH,EAAOG,KAGpC,OACI,6BACI,wBAAIL,UAAU,eAAd,WAIII,EAAaG,KACT,SAACC,EAAWC,GAAZ,OACI,kBAACZ,EAAD,CACIC,KAAMU,EAAU,GAChBT,IAAKS,EAAU,GACfE,IAAKD,S,yCCuElBE,MAhGf,WAAgB,IAAD,EAEqBC,mBAAS,IAF9B,mBAENtD,EAFM,KAEKuD,EAFL,OAIiBD,mBAAS,GAJ1B,mBAINhD,EAJM,KAIGkD,EAJH,KAMPhD,EAAUiD,IAAMC,OAAO3D,OAAO4D,cAAcC,MAAM,KAAK,GANhD,EAQuBN,mBAAS9C,GARhC,mBAQND,EARM,KAQMsD,EARN,KAYPnD,EAAaoD,mBAyCbC,EAAiB,WACnBF,EAAcrD,GACd+C,EAAa,KAGXS,EAAe,WACnBR,EAAW,IAcb,OACE,yBAAKd,UAAU,aACb,kBAAC,EAAD,CACErC,SA9DW,SAAC4D,GACdV,EAAaU,EAAEC,OAAOtD,OACF,IAAIuD,MAAOC,KACnBC,QA4DVrE,UAAWA,EACXM,QAASA,EACTE,QAASA,EACTD,WAAYA,EACZE,eA7DiB,SAACwD,GACD,KAAfA,EAAEK,WACEtE,IAAcO,GACdiD,EAAWlD,EAAU,GACrByD,KAGAA,MAuDNrD,WAAYA,IAEd,kBAAC,EAAD,CACEe,QAvBU,WACdf,EAAW6D,QAAQC,QACnBT,IACAC,KAqBItC,QAlBU,WACdqC,IACAC,KAiBIS,MAAOV,EACPpC,QAxDU,SAACc,GACf,IAAMiC,EAAQ,IAAIC,KAIZC,EACFF,EAAMG,cACJ,IALa,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MACvD,MAAO,MAAO,MAAO,MAAO,MAAO,OAKlBH,EAAMI,WAAW,GAC5B,IACAJ,EAAMK,UACN,OACAL,EAAMM,WACN,IACAN,EAAMO,aACN,IAGNpC,aAAaqC,QAAQN,EAAanC,IAuC9BnC,QAASA,IAEX,kBAAC,EAAD,CAASA,QAASA,MC/FxB6E,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.f2311300.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/switch2.563d3524.ogg\";","import React from 'react';\r\n\r\nfunction WordsPerMin({ count }) {\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                correct words: {count}\r\n            </h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WordsPerMin;","import React from 'react';\r\n\r\nfunction WordDisplay({ word, userInput }) {\r\n    \r\n    return (\r\n        <div>\r\n                {!word.includes(userInput) ? <h1 style={{color: \"hotpink\"}}>{word}</h1> : <h1>{word}</h1>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WordDisplay;","import React from 'react';\r\nimport WordsPerMin from './WordsPerMin';\r\nimport WordDisplay from './WordDisplay';\r\n\r\nfunction UserInput({ onChange, userInput, counter, getWord, randomWord, handleKeyPress, inputFocus }) {\r\n\r\n    // const [userInput, setUserInput] = useState('');\r\n\r\n    // const [counter, setCounter] = useState(0);\r\n    \r\n    // const getWord = faker.random.word().toLowerCase().split(\" \")[0];\r\n\r\n    // const [randomWord, setRandomWord] = useState(getWord);\r\n\r\n    // const onChange = (e) => {\r\n    //     setUserInput(e.target.value);\r\n    // }\r\n\r\n    // const handleKeyPress = (e) => {\r\n    //     if (e.charCode === 13) {\r\n    //         if (userInput === randomWord) {\r\n    //             setCounter(counter + 1);\r\n    //             emptyUserInput();\r\n    //         }\r\n    //         else {\r\n    //             emptyUserInput();\r\n    //         }\r\n    //     }\r\n    // }\r\n    \r\n    // const emptyUserInput = () => {\r\n    //     setRandomWord(getWord);\r\n    //     setUserInput('');\r\n    // }\r\n\r\n    return(\r\n        <div>\r\n            <WordDisplay\r\n                word={randomWord}\r\n                userInput={userInput}\r\n            />\r\n            <input\r\n                type=\"text\"\r\n                onChange={onChange}\r\n                value={userInput}\r\n                onKeyPress={handleKeyPress}\r\n                ref={inputFocus}\r\n                autoCapitalize=\"none\"\r\n            />\r\n            <WordsPerMin\r\n                count={counter}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserInput;","import React from 'react';\r\n\r\nfunction Timer({secLeft}) {\r\n\r\n    return (\r\n        <div>\r\n            <h1>\r\n                    Time Remaining : {secLeft}\r\n            </h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;","import React, { Component } from 'react';\r\nimport Timer from './Timer';\r\n\r\nclass StartGame extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            seconds: 5,\r\n            stop: true\r\n        };\r\n        this.timer = this.timer.bind(this);\r\n        this.onStart = this.props.onStart;\r\n        this.onReset = this.props.onReset;\r\n        this.setData = this.props.setData;\r\n    }\r\n\r\n    timer() {\r\n        this.onStart();\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            stop: false\r\n        })\r\n        this.interval = setInterval(\r\n            () => {\r\n                if (this.state.seconds > 0 && !this.state.stop) {\r\n                    this.setState(prevNum => ({\r\n                        seconds: prevNum.seconds - 1\r\n                    }));\r\n                    console.log(this.props.counter)\r\n                }\r\n                else {\r\n                    const userRecord = this.props.counter;\r\n\r\n                    console.log(userRecord);\r\n                    this.setData(userRecord);\r\n\r\n                    this.setState({\r\n                        seconds: 5,\r\n                        stop: true\r\n                    });\r\n\r\n                    this.onReset();\r\n                    clearInterval(this.interval);\r\n                }\r\n            },\r\n            1000\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button onClick={this.timer}> Start Game </button>\r\n                <Timer secLeft={this.state.seconds} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StartGame;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from 'react';\r\n\r\n// function StartGame({ onStart, setSecLeft, secLeft }) {\r\n\r\n//     React.useEffect(() => {\r\n//         if (secLeft > 0) {\r\n//           setTimeout(() => setSecLeft(secLeft - 1), 1000);\r\n//         }\r\n//     });\r\n\r\n//     return (\r\n//         <div>\r\n            \r\n//             <button\r\n//                 onClick={onStart}\r\n//             >\r\n//                 START GAME!\r\n//             </button>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default StartGame;","import React from 'react';\r\n\r\nfunction Scores({ date, wpm }) {\r\n    return (\r\n        <h3 className=\"historyList\">\r\n            {date} [{wpm} WPM]\r\n        </h3>\r\n    )\r\n}\r\n\r\nfunction History({ counter }) {\r\n    const getData = () => {\r\n\r\n    }\r\n\r\n    const scores = {...localStorage};\r\n    const scoreHistory = [];\r\n\r\n    for (let elem in scores) {\r\n        scoreHistory.push([elem, scores[elem]]);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2 className=\"historyList\">\r\n                History\r\n            </h2>\r\n            {\r\n                scoreHistory.map(\r\n                    (eachScore, index) => (\r\n                        <Scores\r\n                            date={eachScore[0]}\r\n                            wpm={eachScore[1]}\r\n                            key={index}\r\n                        />\r\n                    )\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default History;","import React, { useState, useRef } from 'react';\nimport UserInput from './UserInput';\nimport StartGame from './StartGame';\nimport History from './History';\nimport faker, { random } from 'faker';\nimport Switch2 from './switch2.ogg';\nimport './App.css';\n\nfunction App() {\n\n  const [userInput, setUserInput] = useState('');\n\n  const [counter, setCounter] = useState(0);\n  \n  const getWord = faker.random.word().toLowerCase().split(\" \")[0];\n\n  const [randomWord, setRandomWord] = useState(getWord);\n\n  // const [secLeft, setSecLeft] = useState(60);\n\n  const inputFocus = useRef();\n\n  const onChange = (e) => {\n      setUserInput(e.target.value);\n      const typingSound = new Audio (Switch2);\n      typingSound.play();\n  }\n  \n  const handleKeyPress = (e) => {\n      if (e.charCode === 13) {\n          if (userInput === randomWord) {\n              setCounter(counter + 1);\n              emptyUserInput();\n          }\n          else {\n              emptyUserInput();\n          }\n      }\n  };\n\n  const setData = (wpm) => {\n    const today = new Date();\n    const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n    const currentDate = (\n        today.getFullYear()\n        + '-'\n        + monthNames[today.getMonth()-1]\n        + '-'\n        + today.getDate()\n        + ' / ('\n        + today.getHours()\n        + ':'\n        + today.getMinutes()\n        + ')'\n    );\n\n    localStorage.setItem(currentDate, wpm);\n};\n  \n  const emptyUserInput = () => {\n      setRandomWord(getWord);\n      setUserInput('');\n  };\n\n  const counterReset = () => {\n    setCounter(0);\n  };\n\n  const onStart = () => {\n    inputFocus.current.focus();\n    emptyUserInput();\n    counterReset();\n  };\n  \n  const onReset = () => {\n    emptyUserInput();\n    counterReset();\n  };\n\n  return (\n    <div className=\"gameBoard\">\n      <UserInput\n        onChange={onChange}\n        userInput={userInput}\n        counter={counter}\n        getWord={getWord}\n        randomWord={randomWord}\n        handleKeyPress={handleKeyPress}\n        inputFocus={inputFocus}\n      />\n      <StartGame\n        onStart={onStart}\n        onReset={onReset}\n        empty={emptyUserInput}\n        setData={setData}\n        counter={counter}\n      />\n      <History counter={counter} />\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}