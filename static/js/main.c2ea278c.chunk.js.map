{"version":3,"sources":["switch2.ogg","WordsPerMin.js","WordDisplay.js","UserInput.js","Timer.js","StartGame.js","History.js","App.js","index.js"],"names":["module","exports","WordsPerMin","count","WordDisplay","word","userInput","includes","style","color","UserInput","onChange","counter","randomWord","getWord","handleKeyPress","inputFocus","className","type","placeholder","value","onKeyPress","ref","autoCapitalize","Timer","secLeft","StartGame","props","state","seconds","stop","timer","bind","onStart","onReset","setData","this","setState","interval","setInterval","prevNum","console","log","userRecord","clearInterval","onClick","Component","Scores","date","wpm","index","History","nextID","scoreHistory","i","localStorage","length","scores","temp","JSON","parse","push","record","sort","a","b","map","eachScore","key","App","useState","setUserInput","setCounter","faker","random","toLowerCase","split","setRandomWord","useRef","emptyUserInput","counterReset","e","target","Audio","Switch2","play","charCode","current","focus","empty","today","Date","scoreInfo","getFullYear","getMonth","getDate","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c2ea278c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/switch2.563d3524.ogg\";","import React from 'react';\r\n\r\nfunction WordsPerMin({ count }) {\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                correct words: {count}\r\n            </h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WordsPerMin;","import React from 'react';\r\n\r\nfunction WordDisplay({ word, userInput }) {\r\n    \r\n    return (\r\n        <div>\r\n                {!word.includes(userInput) ? <h1 style={{color: \"hotpink\"}}>{word}</h1> : <h1>{word}</h1>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WordDisplay;","import React from 'react';\r\nimport WordsPerMin from './WordsPerMin';\r\nimport WordDisplay from './WordDisplay';\r\n\r\nfunction UserInput({ onChange, userInput, counter, getWord, randomWord, handleKeyPress, inputFocus }) {\r\n\r\n    // const [userInput, setUserInput] = useState('');\r\n\r\n    // const [counter, setCounter] = useState(0);\r\n    \r\n    // const getWord = faker.random.word().toLowerCase().split(\" \")[0];\r\n\r\n    // const [randomWord, setRandomWord] = useState(getWord);\r\n\r\n    // const onChange = (e) => {\r\n    //     setUserInput(e.target.value);\r\n    // }\r\n\r\n    // const handleKeyPress = (e) => {\r\n    //     if (e.charCode === 13) {\r\n    //         if (userInput === randomWord) {\r\n    //             setCounter(counter + 1);\r\n    //             emptyUserInput();\r\n    //         }\r\n    //         else {\r\n    //             emptyUserInput();\r\n    //         }\r\n    //     }\r\n    // }\r\n    \r\n    // const emptyUserInput = () => {\r\n    //     setRandomWord(getWord);\r\n    //     setUserInput('');\r\n    // }\r\n\r\n    return(\r\n        <div>\r\n            <WordDisplay\r\n                word={randomWord}\r\n                userInput={userInput}\r\n            />\r\n            <input\r\n                className=\"userInput\"\r\n                type=\"text\"\r\n                placeholder=\"click START GAME to play\"\r\n                onChange={onChange}\r\n                value={userInput}\r\n                onKeyPress={handleKeyPress}\r\n                ref={inputFocus}\r\n                autoCapitalize=\"none\"\r\n            />\r\n            <WordsPerMin\r\n                count={counter}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UserInput;","import React from 'react';\r\n\r\nfunction Timer({secLeft}) {\r\n\r\n    return (\r\n        <div>\r\n            <h1>\r\n                    Time Remaining : {secLeft}\r\n            </h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Timer;","import React, { Component } from 'react';\r\nimport Timer from './Timer';\r\n\r\nclass StartGame extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            seconds: 60,\r\n            stop: true\r\n        };\r\n        this.timer = this.timer.bind(this);\r\n        this.onStart = this.props.onStart;\r\n        this.onReset = this.props.onReset;\r\n        this.setData = this.props.setData;\r\n    }\r\n\r\n    timer() {\r\n        this.onStart();\r\n\r\n        this.setState({\r\n            ...this.state,\r\n            stop: false\r\n        })\r\n        this.interval = setInterval(\r\n            () => {\r\n                if (this.state.seconds > 0 && !this.state.stop) {\r\n                    this.setState(prevNum => ({\r\n                        seconds: prevNum.seconds - 1\r\n                    }));\r\n                    console.log(this.props.counter)\r\n                }\r\n                else {\r\n                    const userRecord = this.props.counter;\r\n\r\n                    console.log(userRecord);\r\n                    this.setData(userRecord);\r\n\r\n                    this.setState({\r\n                        seconds: 60,\r\n                        stop: true\r\n                    });\r\n\r\n                    this.onReset();\r\n                    clearInterval(this.interval);\r\n                }\r\n            },\r\n            1000\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <button\r\n                    onClick={this.timer}\r\n                    className=\"startButton\"\r\n                >\r\n                    Start Game\r\n                </button>\r\n                <Timer secLeft={this.state.seconds} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StartGame;\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from 'react';\r\n\r\n// function StartGame({ onStart, setSecLeft, secLeft }) {\r\n\r\n//     React.useEffect(() => {\r\n//         if (secLeft > 0) {\r\n//           setTimeout(() => setSecLeft(secLeft - 1), 1000);\r\n//         }\r\n//     });\r\n\r\n//     return (\r\n//         <div>\r\n            \r\n//             <button\r\n//                 onClick={onStart}\r\n//             >\r\n//                 START GAME!\r\n//             </button>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default StartGame;","import React from 'react';\r\n\r\nfunction Scores({ date, wpm, index }) {\r\n    return (\r\n        <h3 className=\"historyList highlight\">\r\n            {index+1}. &nbsp; {date} [{wpm} WPM]\r\n        </h3>\r\n    )\r\n}\r\n\r\nfunction History({ counter, nextID }) {\r\n    const getData = () => {\r\n\r\n    }\r\n\r\n    const scoreHistory = [];\r\n    for (let i=1; i <= localStorage.length; i++) {\r\n        const scores = {...localStorage};\r\n        const temp = JSON.parse(scores[i]);\r\n        scoreHistory.push([temp.date, temp.record])\r\n    }\r\n\r\n    console.log(scoreHistory);\r\n    \r\n    scoreHistory.sort((a,b) => b[1] - a[1]);\r\n    console.log(scoreHistory);\r\n\r\n    return (\r\n        <div>\r\n            <h2 className=\"historyList\">\r\n                Ranking History\r\n            </h2>\r\n            {\r\n                scoreHistory.map(\r\n                    (eachScore, index) => (\r\n                        <Scores\r\n                            date={eachScore[0]}\r\n                            wpm={eachScore[1]}\r\n                            key={index}\r\n                            index={index}\r\n                        />\r\n                    )\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default History;","import React, { useState, useRef } from 'react';\nimport UserInput from './UserInput';\nimport StartGame from './StartGame';\nimport History from './History';\nimport faker, { random } from 'faker';\nimport Switch2 from './switch2.ogg';\nimport './App.css';\n\nfunction App() {\n\n  const [userInput, setUserInput] = useState('');\n\n  const [counter, setCounter] = useState(0);\n  \n  const getWord = faker.random.word().toLowerCase().split(\" \")[0];\n\n  const [randomWord, setRandomWord] = useState(getWord);\n\n  // const [secLeft, setSecLeft] = useState(60);\n\n  const inputFocus = useRef();\n\n  const nextID = useRef(1);\n\n  const onChange = (e) => {\n      setUserInput(e.target.value);\n      const typingSound = new Audio (Switch2);\n      typingSound.play();\n  }\n  \n  const handleKeyPress = (e) => {\n      if (e.charCode === 13) {\n          if (userInput === randomWord) {\n              setCounter(counter + 1);\n              emptyUserInput();\n          }\n          else {\n              emptyUserInput();\n          }\n      }\n  };\n\n  const setData = (wpm) => {\n    const today = new Date();\n    const monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n\n    const currentDate = (\n        today.getFullYear()\n        + '-'\n        + monthNames[today.getMonth()-1]\n        + '-'\n        + today.getDate()\n    );\n\n    let scoreInfo = {\n      date: currentDate,\n      record: wpm\n    }\n\n    localStorage.setItem(nextID.current, JSON.stringify(scoreInfo));\n    \n    nextID.current++;\n  };\n  \n  const emptyUserInput = () => {\n      setRandomWord(getWord);\n      setUserInput('');\n  };\n\n  const counterReset = () => {\n    setCounter(0);\n  };\n\n  const onStart = () => {\n    inputFocus.current.focus();\n    emptyUserInput();\n    counterReset();\n  };\n  \n  const onReset = () => {\n    emptyUserInput();\n    counterReset();\n  };\n\n  return (\n    <div className=\"gameBoard\">\n      <UserInput\n        onChange={onChange}\n        userInput={userInput}\n        counter={counter}\n        getWord={getWord}\n        randomWord={randomWord}\n        handleKeyPress={handleKeyPress}\n        inputFocus={inputFocus}\n      />\n      <StartGame\n        onStart={onStart}\n        onReset={onReset}\n        empty={emptyUserInput}\n        setData={setData}\n        counter={counter}\n      />\n      <History\n        counter={counter}\n        nextID={nextID}\n      />\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n"],"sourceRoot":""}